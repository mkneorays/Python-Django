settings.py
---------------
"""
Django settings for DjangoMVT_sqlite3DB_StudentApp project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATE_DIR=os.path.join(BASE_DIR,'templates')
STATIC_DIR=os.path.join(BASE_DIR,'static')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6lk67_edo-p0n+8st$#h8jd0si7_c*f!9a@8wwo)c3+(&7spg&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'testapp'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoMVT_sqlite3DB_StudentApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoMVT_sqlite3DB_StudentApp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS=[STATIC_DIR,]
---------------------------------------------------------------------------------------------------------------
urls.py
-------
"""DjangoMVT_sqlite3DB_StudentApp URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/2.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path
from testapp import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('welcome/',views.welcome_view),
]
-------------------------------------------------------------------------------------------------------
views.py   (application level)
------------------------------
from django.shortcuts import render
from django.http import HttpResponse
import datetime
# Create your views here.
def welcome_view(request):
    date=datetime.datetime.now()
    return render(request,'html/welcome.html',{'date':date})
    #return HttpResponse('<h1>Welcome to   Django </h1></br>'+str(date))
-----------------------------------------------------------------------------------------------------
welcome.html  (inside template/html/welcome.html)
---------------------------------------------------
<!DOCTYPE html>
{%load staticfiles%}
<html>
<head>
  <link rel="stylesheet" href="{%static "css/style.css" %}">
<script type="text/javascript" src="{%static "js/date.js" %}"></script>

<!--
 <script type="text/javascript">
    function date(){
    document.getElementById('demo').innerHTML = Date()
  }
</script>

<style media="screen">
body{
  text-align: center;
  color: blue;
}
p {
    text-align: center;
    color: red;
}
</style>   -->
</head>
<body>


<h1>Hey..!  Folks, Welcome to Django</h1>
<h2>Current Date & Time : {{date}}</h2>
<br><br>
 <img src="{%static "images/mithu.jpg"%}" alt="mithu" width="200px" height="200px">
<br><br>
 <p>Every paragraph will be affected by the style.</p>
<p id="para1">Me too!</p>
<p>And me!</p>

<button type="button"
onclick="date()">
Click me to display Date and Time.</button>
<h3>javascript Date and Time Below</h3>
<p id="demo"></p>
</body>
</html
-----------------------------------------------------------------
date.js
--------
function date(){
document.getElementById('demo').innerHTML = Date()
}
----------------------------------------------------------------------
style.css
----------
body{
  text-align: center;
  color: blue;
}


p {
    text-align: center;
    color: red;
}
------------------------------------------------------------------------------------------
models.py  (application level)
-------------------------------
from django.db import models

# Create your models here.
class Student(models.Model):
    no=models.IntegerField()
    name=models.CharField(max_length=20)
    salary=models.FloatField()
----------------------------------------------------------------
C:\Users\CHOTKA\Desktop\PYTHON\DjangoApps\DjangoMVT_sqlite3DB_StudentApp>python manage.py makemigrations
Migrations for 'testapp':
  testapp\migrations\0001_initial.py
    - Create model Student

C:\Users\CHOTKA\Desktop\PYTHON\DjangoApps\DjangoMVT_sqlite3DB_StudentApp>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, sessions, testapp
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying auth.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying sessions.0001_initial... OK
  Applying testapp.0001_initial... OK

C:\Users\CHOTKA\Desktop\PYTHON\DjangoApps\DjangoMVT_sqlite3DB_StudentApp>tree \f
---------------------------------------------------------------------------------------------------
 #  Generate SuperUserInterface using below command
 
 C:\Users\CHOTKA\Desktop\PYTHON\DjangoApps\DjangoMVT_sqlite3DB_StudentApp>python manage.py createsuperuser
Username (leave blank to use 'chotka'): mithu
Email address: mithu@gmail.com
Password:
Password (again):
The password is too similar to the email address.
This password is too short. It must contain at least 8 characters.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully.
---------------------------------------------------------------------------------------------------
Note- after that u have to register your model in admin.py which is present in testapp application
admin.py
--------
from django.contrib import admin
from testapp.models import Student

# Register your models here.
#admin.site.register(Student)


# if u want to display data in tabler form
class StudntAdmin(admin.ModelAdmin):
    list_display=['id','no','name','salary']
admin.site.register(Student,StudntAdmin)
---------------------------------------------------------------------------------------------
generate fake data
----------------------
fakedata.py   (project level)
------------
import os
os.environ.setdefault('DJANGO_SETTINGS_MODULE','DjangoMVT_sqlite3DB_StudentApp.settings')
import django
django.setup()

from testapp.models import *
from faker import Faker
from random import *
faker=Faker()
def fakedata(n):
    for i in range(n):
        fno=randint(1001,9999)
        fname=faker.name()
        fsalary=randint(10000,30000)
        #faddress=faker.city()
        emp_record=Student.objects.get_or_create(no=fno,name=fname,salary=fsalary)
# pass no how many records you want
fakedata(40)
Note-> run this command --->python fakedata.py
-----------------------------------------------------------------------------------
welcome.html
------------

<!DOCTYPE html>
{%load staticfiles%}
<html>
<head>
  <link rel="stylesheet" href="{%static "css/style.css" %}">
<script type="text/javascript" src="{%static "js/date.js" %}"></script>

<!--
 <script type="text/javascript">
    function date(){
    document.getElementById('demo').innerHTML = Date()
  }
</script>

<style media="screen">
body{
  text-align: center;
  color: blue;
}
p {
    text-align: center;
    color: red;
}
</style>   -->
</head>
<body>


<h1>Hey..!  Folks, Welcome to Django</h1>
<h2>Current Date & Time : {{date}}</h2>
<br><br>
 <img src="{%static "images/mithu.jpg"%}" alt="mithu" width="200px" height="200px">
<br><br>
 <p>Every paragraph will be affected by the style.</p>
<p id="para1">Me too!</p>
<p>And me!</p>

<button type="button"
onclick="date()">
Click me to display Date and Time.</button>
<h3>javascript Date and Time Below</h3>
<p id="demo"></p>
<hr>
{% if student %} <!--  -jinga2 template tag automitically support   -->
  <table>
    <th>NO</th><th>NAME</th><th>ADDRESS</th><th>SALARY</th>
    {% for stu in student %}
      <tr>
          <td>{{stu.id}}</td>
        <td>{{stu.no}}</td>
          <td>{{stu.name}}</td>
              <td>{{stu.salary}}</td>
      </tr>
      {%endfor%}
  </table>
   {%else%}
    <h2>NO Student Record Found</h2>
 {%endif%}
</body>
</html
-----------------------------------------------------------------------------------------------

NO	NAME	ADDRESS	SALARY	D.O.B	MOBILE	EMAIL ID
1	3668	Robert Chapman	25406.0
2	1364	Kristen Hardin	21452.0
3	7074	Terri Clayton	17660.0
4	8617	Whitney Young	10137.0
5	4202	Derek Williams	12034.0
6	3023	Amy Kelly	24982.0
7	9072	Matthew Zimmerman	28703.0
8	5164	Angela Vaughn	18290.0
9	7934	Donald Jones	14739.0
10	5317	Chelsea Jackson	28829.0
11	8522	Matthew Davis	23770.0
12	9572	Karen Melton	15926.0
13	3386	Valerie Robinson	16790.0
14	1459	Christopher Johnson	29019.0
15	9950	Robert Perez	22159.0
16	9654	Bradley Potter	27537.0
17	9253	David Li	19708.0
18	3256	Marcia Morrow	25624.0
19	3389	Kaitlyn Powell	20934.0
20	2244	Paul Carney	19984.0
21	1388	Mathew Scott	15545.0
22	8802	Donna Cooper	17162.0
23	1274	Lindsey Brock	23373.0
24	2189	Mckenzie Fitzgerald	15388.0
25	8166	Wendy Johnson	28284.0
26	6708	James Turner	29573.0
27	8922	Victor Huff	19821.0
28	2357	Dylan Richards	14019.0
29	8543	Danielle Hebert	10146.0
30	5688	Robert Nichols	15586.0
31	3733	Marcus Cameron	19249.0
32	9792	Penny Harmon	26751.0
33	6283	Matthew Leach	11879.0
34	4767	Julie Tapia	21689.0
35	9093	Jared Evans	12570.0
36	5712	Jerry Burnett	21537.0
37	7317	Claudia Brown	17027.0
38	3685	Christopher Miller	23123.0
39	4747	Chase Bradley	12160.0
40	6110	Alexis Welch	15952.0




